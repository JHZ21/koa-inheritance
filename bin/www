#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('demo:server')
var http = require('http')
const https = require('https')
const path = require('path')
const fs = require('fs')

// SSL options
const options = {
	key: fs.readFileSync(path.join(__dirname, './cert/private.key')),
	cert: fs.readFileSync(path.join(__dirname, './cert/certificate.crt')),
	ca: fs.readFileSync(path.join(__dirname, './cert/ca_bundle.crt'))
}
// Create HTTPS server.


/**
 * Listen on provided port, on all network interfaces.
 */



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback())

const httpsServer = https.createServer(options, app.callback())


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
	console.log(port)
})
server.on('error', onError)
server.on('listening', onListening)

httpsServer.listen(4433, ()=>{
	console.log('4433')
})
httpsServer.on('error', onError)
httpsServer.on('listening', onListeningHttps)


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges')
		process.exit(1)
		break
	case 'EADDRINUSE':
		console.error(bind + ' is already in use')
		process.exit(1)
		break
	default:
		throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address()
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port
	debug('Listening on ' + bind)
}

function onListeningHttps() {
	var addr = httpsServer.address()
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port
	debug('Listening on ' + bind)
}
